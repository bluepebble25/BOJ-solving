const fs = require('fs');
const N = Number(fs.readFileSync('./input.txt').toString().trim());

function solution() {
  const dp = Array(N + 1).fill(0);
  dp[1] = 1;
  dp[2] = 2;

  for (let i = 3; i <= N; i++) {
    dp[i] = (dp[i - 2] % 15746) + (dp[i - 1] % 15746);
  }

  return dp[N] % 15746;
}

console.log(solution());

/*
  N=1 -> 1
  1

  N=2 -> 2
  00, 11

  N=3 -> 3
  001, 100, 111

  N=4 -> 5
  0000, 0011, 1001, 1100, 1111

  00을 붙일 수 있는 경우는 dp[i-2]의 뒤에 00을 붙이는 방법 뿐이다.
  11의 앞에 00을 붙여서 0011을 만들어도 이미 dp[i-1]의 001의 뒤에 1을 덧붙이는 방법으로도 만들수 있으므로
  00을 앞 말고 뒤에 붙이는 경우만 생각한다.
  dp이니까 최대한 뒤에 숫자를 붙이는 방향으로 생각하자.

  1을 붙일 수 있는 경우는 dp[i-2]의 뒤에 1을 붙이는 경우이다.
  앞에 붙이는 건 예를 들어 1100을 만든다고 하면 이미 11 뒤에 00을 붙이는 경우에서 만들었기 때문에 1을 뒤에 붙이는 방법으로 만들 필요가 없다.

  점화식을 최종 정리하면
  dp[i] = dp[i-2] + dp[i-1]
*/
